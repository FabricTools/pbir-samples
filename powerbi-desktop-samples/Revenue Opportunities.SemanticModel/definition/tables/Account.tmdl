table Account
	lineageTag: 7aac98fd-1529-47b4-87ad-1f20e739fd6c

	column Account
		dataType: string
		lineageTag: eda0cb8f-c685-46e8-af41-8d8a17d99ae1
		summarizeBy: none
		sourceColumn: Account

		annotation SummarizationSetBy = Automatic

	column Region
		dataType: string
		lineageTag: 8effed20-3041-4a23-9b2c-4dc16f98b1a3
		summarizeBy: none
		sourceColumn: Region

		annotation SummarizationSetBy = Automatic

	column Segment
		dataType: string
		lineageTag: d326616a-ea29-42bd-8c4d-efeaf1bd6888
		summarizeBy: none
		sourceColumn: Segment

		annotation SummarizationSetBy = Automatic

	column 'Account ID'
		dataType: int64
		formatString: 0
		lineageTag: 6dd1686c-88ca-4da1-8eb6-cf968fd1d7dc
		summarizeBy: none
		sourceColumn: Account ID

		annotation SummarizationSetBy = Automatic

	column State
		dataType: string
		lineageTag: 87ba8255-3604-4ff4-a707-989781d644c6
		summarizeBy: none
		sourceColumn: State

		annotation SummarizationSetBy = Automatic

	partition Account-20fc8f34-ec54-4261-8252-a37decc5f94d = m
		mode: import
		source =
				let
				    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("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", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Account = _t, Region = _t, Segment = _t, #"Account ID" = _t, State = _t]),
				    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Account", type text}, {"Region", type text}, {"Segment", type text}, {"Account ID", Int64.Type}, {"State", type text}})
				in
				    #"Changed Type"

	annotation PBI_ResultType = Table

